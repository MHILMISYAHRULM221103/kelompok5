# -*- coding: utf-8 -*-
"""TB mesinlearning.unknown

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/159CN3sZM31sUw7KEN77ts8r1EdpKZWoL
"""

import pandas as pd
import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import plotly.express as px
from sklearn.metrics import mean_squared_error
import math

df = pd.read_csv('Jumlah Penduduk Hasil Proyeksi Interim di Provinsi Jawa Barat Menurut Kabupaten_Kota dan Jenis Kelamin.csv',delimiter=';')
df.head()

X = df[['Laki-Laki dan Perempuan 2021-2023']]
y = df['Laki-Laki 2021-2023']

df.isnull().any()

# Membagi data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Membangun model Linear Regression
model = LinearRegression()

# Melatih model
model.fit(X_train, y_train)

# Koefisien model
coef = model.coef_
# Intersepsi model
intercept = model.intercept_

# Menampilkan koefisien dan intersepsi
print("Koefisien:", coef)
print("Intersepsi:", intercept)

# Melakukan prediksi pada data pengujian
y_pred = model.predict(X_test)

# Memprediksi data uji
y_test_pred = model.predict(X_test)

# Menampilkan hasil prediksi
prediksi = pd.DataFrame({'Actual': y_test, 'Predicted': y_test_pred})
print(prediksi)

# Menghitung mean squared error (MSE)
from sklearn.metrics import mean_squared_error
mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error (MSE):", mse)

# Menampilkan plot hasil prediksi vs. data asli
plt.scatter(X_test, y_test, color='blue', label='Data Asli')
plt.plot(X_test, y_pred, color='red', linewidth=2, label='Prediksi')
plt.xlabel('Jumlah Populasi (2021-2023)')
plt.ylabel('Jumlah Populasi Laki-Laki (2021-2023)')
plt.legend()
plt.show()

# Mengambil data terbaru untuk digunakan sebagai input prediksi
latest_data = df['Laki-Laki dan Perempuan 2021-2023'].iloc[-1]

# Menyiapkan data untuk prediksi tahun 2024 dan 2025
years = np.array([2024, 2025])
predict_data = np.array([latest_data] * len(years)).reshape(-1, 1)

# Melakukan prediksi jumlah penduduk tahun 2024 dan 2025
predictions = model.predict(predict_data)

# Menampilkan hasil prediksi
for i in range(len(years)):
    print("Prediksi jumlah penduduk tahun", years[i], ":", predictions[i])

fig = px.scatter(df, y="Laki-Laki 2021-2023", x="Laki-Laki dan Perempuan 2021-2023", color="Kabupaten/Kota")
fig.update_traces(marker_size=8)

fig.show()

import matplotlib.pyplot as plt

# Daftar warna untuk setiap kabupaten/kota
colors = ['#FDE992', '#FFA07A', '#90EE90', '#ADD8E6', '#FFC0CB']

fig, ax = plt.subplots(figsize=(10, 5))

# Memisahkan data berdasarkan kabupaten/kota dan membuat histogram untuk setiap kabupaten/kota
for i, kabupaten in enumerate(df["Kabupaten/Kota"].unique()):
    data = df[df["Kabupaten/Kota"] == kabupaten]["Laki-Laki dan Perempuan 2021-2023"]
    ax.hist(data, bins=10, color=colors[i % len(colors)], edgecolor="#50C878", lw=3, label=kabupaten)

plt.title('Distribusi Jumlah Penduduk')
plt.xlabel('Jumlah Penduduk (2021-2023)')
plt.ylabel('Frekuensi')
plt.legend()

plt.show()

# Mengambil data aktual tahun 2021-2023
actual_data = df['Laki-Laki dan Perempuan 2021-2023']

# Menyiapkan data prediksi tahun 2024-2025
years_pred = np.array([2024, 2025])
predict_data = np.array([latest_data] * len(years_pred)).reshape(-1, 1)

# Melakukan prediksi jumlah penduduk tahun 2024-2025
predictions = model.predict(predict_data)

# Membuat dataframe untuk data aktual dan prediksi
data = {
    'Tahun': np.append(df['Kabupaten/Kota'], years_pred),
    'Laki-Laki dan Perempuan': np.append(actual_data, predictions)
}

df_predictions = pd.DataFrame(data)

print(df_predictions)

# Menyiapkan data untuk visualisasi
years_actual = df['Kabupaten/Kota']
actual_data = df['Laki-Laki dan Perempuan 2021-2023']
years_pred = np.array([2024, 2025])
predict_data = np.array([latest_data] * len(years_pred)).reshape(-1, 1)
predictions = model.predict(predict_data)

# Menggabungkan tahun aktual dan tahun prediksi
years = np.append(years_actual, years_pred)

# Menggabungkan data aktual dan data prediksi
data = np.append(actual_data, predictions)

# Mengatur warna untuk data aktual dan data prediksi
colors = ['#FDE992'] * len(years_actual) + ['#FFA07A', '#90EE90']

# Membuat plot
plt.figure(figsize=(10, 6))
plt.bar(years.astype(str), data, color=colors)

# Menambahkan label pada sumbu x dan y
plt.xlabel('Prediksi Penduduk L & P Wilayah Jawa Barat 2024-2025')
plt.ylabel('Jumlah Laki-Laki dan Perempuan')
plt.title('Analisis dan Prediksi Jumlah Penduduk Laki-Laki dan Perempuan')

plt.show()

# Mengambil data aktual
actual_laki_laki = df['Laki-Laki 2021-2023']
actual_perempuan = df['Perempuan 2021-2023']
actual_total = df['Laki-Laki dan Perempuan 2021-2023']

# Menghitung prediksi untuk data aktual
predictions_laki_laki = model.predict(df[['Laki-Laki 2021-2023']].values.reshape(-1, 1))
predictions_perempuan = model.predict(df[['Perempuan 2021-2023']].values.reshape(-1, 1))
predictions_total = model.predict(df[['Laki-Laki dan Perempuan 2021-2023']].values.reshape(-1, 1))

# Menghitung RMSE untuk data penduduk Laki-Laki
rmse_laki_laki = math.sqrt(mean_squared_error(actual_laki_laki, predictions_laki_laki))

# Menghitung RMSE untuk data penduduk Perempuan
rmse_perempuan = math.sqrt(mean_squared_error(actual_perempuan, predictions_perempuan))

# Menghitung RMSE untuk data penduduk total
rmse_total = math.sqrt(mean_squared_error(actual_total, predictions_total))

print("RMSE Laki-Laki: ", rmse_laki_laki)
print("RMSE Perempuan: ", rmse_perempuan)
print("RMSE Total: ", rmse_total)